package com.example.caregiver;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Build;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;

import android.preference.PreferenceManager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.SimpleAdapter;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * A simple {@link Fragment} subclass.
 * Use the {@link Task_Caregivee#newInstance} factory method to
 * create an instance of this fragment.
 */
public class Task_Caregivee extends Fragment {

    // Global object to store the task list
    List < Task > taskList = new ArrayList < >();

    // Global view
    View view;

    /** This represent a single task object */
    public class Task {
        String room;/* the room where the task is located */
        String caregiverId;/* the caregiver who assigned the task */
        String taskId;/* the task id, auto-generated by Firebase */
        String taskName;/* task actions (e.g Brush Your Teeth) */
        String taskNote;/* task notes (Your Brush Is The Red One) */
        String assignedStatus;/* true = task assigned to caregivee to do, false otherwise*/
        String completionStatus;/* caregivee complete the tasks (complete), incomplete otherwise */

        // Default constructor
        public Task() {};

        // Alternative constructor to instantiate the task object.
        public Task(String room, String caregiverId, String taskId, String taskName,
                    String taskNote, String assignedStatus, String completionStatus) {
            this.room = room;
            this.caregiverId = caregiverId;
            this.taskId = taskId;
            this.taskName = taskName;
            this.taskNote = taskNote;
            this.completionStatus = completionStatus;
            this.assignedStatus = assignedStatus;
        }
    }

    public Task_Caregivee() {
        // Required empty public constructor
    }

    // TODO: Rename and change types and number of parameters
    public static Task_Caregivee newInstance(String param1, String param2) {
        Task_Caregivee fragment = new Task_Caregivee();
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    /** Loads all rooms associated with this caregivee */
    protected void loadCaregiveesTask() {
        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(getActivity());
        String caregiveeId = preferences.getString("userId", "");
        if (caregiveeId.isEmpty()) {
            return;
        }
        DatabaseReference database = FirebaseDatabase.getInstance().getReference();
        DatabaseReference ref = database.child("users/" + caregiveeId);
        ref.addValueEventListener(new ValueEventListener() {@RequiresApi(api = Build.VERSION_CODES.N)@Override
        public void onDataChange(@NonNull DataSnapshot snapshot) {
            Object roomObject = snapshot.child("rooms").getValue();
            if (roomObject != null) {
                Gson gson = new Gson();
                String tasksJson = gson.toJson(roomObject);
                taskList = createTaskList(tasksJson);
                displayTaskList(taskList);
            }
        }@Override
        public void onCancelled(@NonNull DatabaseError error) {
            Log.d("error", "Can't query caregivees for this caregiver");
        }
        });
    }

    /**
     * Returns all tasks associated with that caregivee.
     * @param roomString Json-string representation of all the rooms.
     */
    @RequiresApi(api = Build.VERSION_CODES.N)
    protected List < Task > createTaskList(String roomString) {

        // Initialize an array list that will store all tasks associated with the caregivee.
        List < Task > tasks = new ArrayList < >();

        // Parse the roomString to return a json Object representation.
        JsonParser parser = new JsonParser();
        JsonObject roomObject = (JsonObject) parser.parse(roomString);
        List < String > rooms = roomObject.entrySet().stream().map(
                i ->i.getKey()).collect(Collectors.toCollection(ArrayList::new));

        // For each room, get their corresponding tasks
        for (String roomStr: rooms) {
            JsonObject singleRoom = roomObject.getAsJsonObject(roomStr);
            JsonObject tasksPerRoom = singleRoom.getAsJsonObject("tasks");
            if (tasksPerRoom != null) {
                List < String > tasksIds = tasksPerRoom.entrySet().stream().map(
                        i ->i.getKey()).collect(Collectors.toCollection(ArrayList::new));

                // For each task, put them in the Task object.
                for (String taskId: tasksIds) {
                    JsonObject task = tasksPerRoom.getAsJsonObject(taskId);
                    String caregiverId = task.get("caregiverID").toString();
                    String taskName = task.get("name").toString();
                    String taskNote = task.get("notes").toString();
                    String assignedStatus = task.get("assignedStatus").toString();
                    String completionStatus = task.get("completionStatus").toString();

                    // Only assigned task where assignedStatus is equal to true
                    if (assignedStatus.equals("true")){
                        Task t = new Task(roomStr, caregiverId, taskId, taskName,
                                taskNote, assignedStatus, completionStatus);
                        tasks.add(t);
                    }
                }
            }
        }
        return tasks;
    }

    protected void displayTaskList(List < Task > tasks) {
        List < Map < String,  String >> data = new ArrayList < Map < String, String >> ();
        for (Task t: tasks) {
            Map < String,
                    String > room = new HashMap < String,
                    String > (2);
            room.put("title", t.taskName.replace("\"", " "));
            room.put("subtitle", " " + t.room);
            data.add(room);
        }
        final ListView list = view.findViewById(R.id.caregiveeTaskList);
        SimpleAdapter adapter = new SimpleAdapter(
                getActivity(), data, android.R.layout.simple_list_item_2, new String[] {
                "title",
                "subtitle"
        },
                new int[] {
                        android.R.id.text1,
                        android.R.id.text2
                });
        list.setAdapter(adapter);

        // Redirect to TaskSingleView page with the task data
        list.setOnItemClickListener(new AdapterView.OnItemClickListener() {@Override
        public void onItemClick(AdapterView < ?>parent, View view, final int position, long id) {
            Gson gson = new Gson();
            if (taskList.get(position) != null){
                String taskJson = gson.toJson(taskList.get(position));
                Intent i = new Intent(view.getContext(), TaskSingleView.class);
                i.putExtra("taskObject", taskJson);
                startActivity(i);
            }
        }
        });
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        view = inflater.inflate(R.layout.fragment_task__caregivee, container, false);

        // Load the caregivee list of task for the day
        loadCaregiveesTask();

        return view;
    }
}