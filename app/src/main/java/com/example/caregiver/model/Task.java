package com.example.caregiver.model;

import android.os.Build;
import android.os.Parcel;
import android.os.Parcelable;

import androidx.annotation.RequiresApi;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;


/** This represents a single task object
 *  Is Parcelable in order to serialize Task object and pass to new intent
 *  */
public class Task implements Parcelable {
    public String caregiveeId; /* the caregivee associated with the task */
    public String caregiverId; /* the caregiver who assigned the task */
    public String taskId; /* the task id, auto-generated by Firebase */
    public String taskName; /* task actions (e.g Brush Your Teeth) */
    public String taskNote; /* task notes (Your Brush Is The Red One) */
    public String assignedStatus; /* true = task assigned to caregivee to do, false otherwise*/
    public String completionStatus; /* caregivee complete the tasks (complete), incomplete otherwise */
    public String room; /* room in which task was assigned */

    // Default constructor
    public Task() {};

    // Alternative constructor
    public Task(String caregiveeId, String caregiverId, String taskId, String taskName, String taskNote,
                String assignedStatus, String completionStatus, String roomStr) {
        this.caregiveeId = caregiveeId;
        this.caregiverId = caregiverId;
        this.taskId = taskId;
        this.taskName = taskName;
        this.taskNote = taskNote;
        this.completionStatus = completionStatus;
        this.assignedStatus = assignedStatus;
        this.room = roomStr;
    }


    protected Task(Parcel in) {
        caregiveeId = in.readString();
        caregiverId = in.readString();
        taskId = in.readString();
        taskName = in.readString();
        taskNote = in.readString();
        assignedStatus = in.readString();
        completionStatus = in.readString();
        room = in.readString();
    }

    public static final Creator<Task> CREATOR = new Creator<Task>() {
        @Override
        public Task createFromParcel(Parcel in) {
            return new Task(in);
        }

        @Override
        public Task[] newArray(int size) {
            return new Task[size];
        }
    };


    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(caregiveeId);
        dest.writeString(caregiverId);
        dest.writeString(taskId);
        dest.writeString(taskName);
        dest.writeString(taskNote);
        dest.writeString(assignedStatus);
        dest.writeString(completionStatus);
        dest.writeString(room);
    }

    private static List < Task > getAllTasks(String caregiveeId, Object firebaseRooms) {
        Gson gson = new Gson();

        // Initialize an array list that will store all tasks associated with the caregivee.
        List<Task> tasks = new ArrayList<>();

        // Parse the roomString to return a json Object representation.
        JsonParser parser = new JsonParser();
        JsonObject roomObject = (JsonObject) parser.parse(gson.toJson(firebaseRooms));
        List<String> rooms = roomObject.entrySet().stream().map(
                i -> i.getKey()).collect(Collectors.toCollection(ArrayList::new));

        // For each room, get their corresponding tasks
        for (String roomStr : rooms) {
            JsonObject singleRoom = roomObject.getAsJsonObject(roomStr);
            JsonObject tasksPerRoom = singleRoom.getAsJsonObject("tasks");
            if (tasksPerRoom != null) {
                List<String> tasksIds = tasksPerRoom.entrySet().stream().map(
                        i -> i.getKey()).collect(Collectors.toCollection(ArrayList::new));

                // For each task, put them in the Task object.
                for (String taskId : tasksIds) {
                    JsonObject task = tasksPerRoom.getAsJsonObject(taskId);
                    String caregiverId = task.get("caregiverID").getAsString();
                    String taskName = task.get("name").getAsString();
                    String taskNote = task.get("notes").getAsString();
                    String assignedStatus = task.get("assignedStatus").getAsString();
                    String completionStatus = task.get("completionStatus").getAsString();

                    Task t = new Task(caregiveeId, caregiverId, taskId, taskName, taskNote,
                            assignedStatus, completionStatus, roomStr);
                    tasks.add(t);

                }
            }
        }
        return tasks;
    }

    /**
     * Returns all tasks associated with that caregivee that is assigned to them.
     * @param caregiveeId the String that represent the caregivee ID
     * @param firebaseRooms this object contains all data under users/caregiveeID/rooms
     */
    @RequiresApi(api = Build.VERSION_CODES.N)
    public static List< Task > getAssignedTaskList(String caregiveeId, Object firebaseRooms) {
        List<Task> assignedTasks = new ArrayList<>();
        List<Task> tasks = getAllTasks(caregiveeId, firebaseRooms);
        for (Task task : tasks){
            if (task.assignedStatus.equals("true")){
                assignedTasks.add(task);
            }
        }
        return assignedTasks;
    }

    /**
     * Returns all tasks associated with that caregivee that has been completed
     * @param caregiveeId the String that represent the caregivee ID
     * @param firebaseRooms this object contains all data under users/caregiveeID/rooms
     */
    @RequiresApi(api = Build.VERSION_CODES.N)
    public static List< Task > getCompletedTaskList(String caregiveeId, Object firebaseRooms) {
        List<Task> completedTasks = new ArrayList<>();
        List<Task> tasks = getAllTasks(caregiveeId, firebaseRooms);
        for (Task task : tasks){
            if (task.completionStatus.equals("complete")){
                completedTasks.add(task);
            }
        }
        return completedTasks;
    }

    /**
     * Return the progress for a task by date (if the date is Feb. 8, return the time a caregivee
     * has completed the task on Feb 8.
     * @param taskId the task Id
     * @param date the current date, in epoch time format
     * @return
     */
    public static HashMap<String, String> getTaskProgress(String taskId, String date){
        
        return null;
    }

}